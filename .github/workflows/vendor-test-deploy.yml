name: Fix, Vendor, Test & Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  fix_vendor_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Vendor browser libs (no CDN at runtime)
        run: |
          set -e
          mkdir -p libs
          curl -L https://cdn.jsdelivr.net/npm/pizzip@3.2.0/dist/pizzip.min.js -o libs/pizzip.min.js
          curl -L https://cdn.jsdelivr.net/npm/pizzip@3.2.0/dist/pizzip-utils.min.js -o libs/pizzip-utils.min.js
          curl -L https://unpkg.com/docxtemplater@3.66.6/build/docxtemplater.js -o libs/docxtemplater.js
          curl -L https://unpkg.com/mammoth@1.11.0/dist/mammoth.browser.min.js -o libs/mammoth.browser.min.js
          printf '{\n  "docxtemplater": "3.66.6",\n  "pizzip": "3.2.0",\n  "mammoth": "1.11.0",\n  "updated_at": "%s"\n}\n' "$(date -u +%Y-%m-%dT%H:%M:%SZ)" > libs/versions.json
          ls -l libs

      - name: Create tag-normalizer script
        run: |
          set -e
          mkdir -p scripts
          cat > scripts/fix_docx_tags.py <<'PY'
          #!/usr/bin/env python3
          import sys, zipfile, re, tempfile, shutil
          from pathlib import Path

          TAG_RX = re.compile(r"\{([#/\^])\s*([^{}]+?)\}")

          def fix_xml_text(txt: str) -> str:
              return TAG_RX.sub(lambda m: "{{%s%s}}" % (m.group(1), m.group(2).strip()), txt)

          def process_docx(path: Path) -> Path:
              fixed = path.with_name(f"{path.stem}.fixed{path.suffix}")
              tmpdir = Path(tempfile.mkdtemp(prefix="fixdocx_"))
              try:
                  with zipfile.ZipFile(path, "r") as z:
                      z.extractall(tmpdir)
                  for p in tmpdir.rglob("*.xml"):
                      p.write_text(fix_xml_text(p.read_text(encoding="utf-8")), encoding="utf-8")
                  with zipfile.ZipFile(fixed, "w", zipfile.ZIP_DEFLATED) as z:
                      for p in sorted(tmpdir.rglob("*")):
                          if p.is_file():
                              z.write(p, p.relative_to(tmpdir).as_posix())
                  return fixed
              finally:
                  shutil.rmtree(tmpdir, ignore_errors=True)

          def main():
              root = Path(sys.argv[1] if len(sys.argv) > 1 else "template")
              for docx in root.glob("*.docx"):
                  out = process_docx(docx)
                  print(f"fixed: {out}")

          if __name__ == "__main__":
              main()
          PY
          chmod +x scripts/fix_docx_tags.py

      - name: Normalize DOCX section tags
        run: |
          set -e
          if [ -d "template" ]; then
            python3 scripts/fix_docx_tags.py template
            ls -l template/*fixed.docx || true
          else
            echo "No template directory found. Skipping normalization."
          fi

      - name: Patch index.html (use local libs + fixed template)
        run: |
          set -e
          echo "🔧 Patching index.html"

          # 1) Remove any CDN script tags for these libs
          sed -i -E '/(unpkg|jsdelivr).*(docxtemplater|pizzip|mammoth)/d' index.html || true

          # 2) Insert local libs after <head> if missing
          if ! grep -q 'libs/pizzip.min.js' index.html; then
            sed -i '/<head[^>]*>/a \
<script src="libs/pizzip.min.js"></script>\n<script src="libs/pizzip-utils.min.js"></script>\n<script src="libs/docxtemplater.js"></script>\n<script src="libs/mammoth.browser.min.js"></script>' index.html
          fi

          # 3) Switch template reference to normalized fixed DOCX
          sed -i 's/po-noban\.template\.docx/po-noban.template.fixed.docx/g' index.html

          # 4) Ensure composer safety wrapper exists (idempotent)
          if ! grep -q 'composeDocxBlobPatched' index.html; then
            printf '\n<!-- patched composer -->\n<script>\nwindow.composeDocxBlob = async function (arrayBuffer, data){\n  const zip = new PizZip(arrayBuffer);\n  const doc = new docxtemplater(zip, {\n    paragraphLoop:true,\n    linebreaks:true,\n    errorLogging:true,\n    delimiters:{start:\"{{\",end:\"}}\"},\n    nullGetter(){return \"\";}\n  });\n  doc.render(data||{});\n  return doc.getZip().generate({type:\"blob\",mimeType:\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"});\n};\n</script>\n' >> index.html
          fi

          echo "✅ index.html patched"

      - name: Add smoke-data (covers typical fields)
        run: |
          set -e
          mkdir -p tests
          cat > tests/smoke_data.json <<'JSON'
          {
            "meta": {
              "poNumber": "PO-2025-001",
              "issueDate": "2025-01-01",
              "subject": "نمونه سفارش",
              "projectName": "پروژه نمونه",
              "manufacturerName": "شرکت نمونه",
              "manufacturerCountry": "ایران",
              "amount": 1000000,
              "amountWords": "یک میلیون",
              "currency": "IRR",
              "currencyFa": "ریال",
              "deliveryDays": 30,
              "deliveryType": "کاری"
            },
            "items": [
              { "row": 1, "description": "کالای A", "qty": 5, "unit": "EA", "unitPrice": 10000, "total": 50000 },
              { "row": 2, "description": "کالای B", "qty": 2, "unit": "EA", "unitPrice": 250000, "total": 500000 }
            ],
            "clauses": { "delivery": "DAP", "payment": "30days", "warranty": "12months" }
          }
          JSON

      - name: Setup Node for smoke test
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install test deps (CI only)
        run: |
          set -e
          npm init -y >/dev/null 2>&1
          npm install --no-audit --no-fund docxtemplater@3.66.6 pizzip@3.2.0 mammoth@1.11.0

      - name: Create & run smoke test
        run: |
          set -e
          cat > tests/smoke_test.js <<'JS'
          const fs = require('fs');
          const path = require('path');
          const PizZip = require('pizzip');
          const Docxtemplater = require('docxtemplater');
          const mammoth = require('mammoth');

          (async () => {
            const tplPath = path.join('template','po-noban.template.fixed.docx');
            if (!fs.existsSync(tplPath)) {
              console.warn('Fixed template not found; skipping smoke test:', tplPath);
              process.exit(0);
            }

            const tpl = fs.readFileSync(tplPath);
            const data = JSON.parse(fs.readFileSync(path.join('tests','smoke_data.json'),'utf8'));

            const zip = new PizZip(tpl);
            const doc = new Docxtemplater(zip, {
              paragraphLoop: true,
              linebreaks: true,
              errorLogging: true,
              delimiters: { start: '{{', end: '}}' },
              nullGetter(){ return ''; }
            });

            try {
              doc.render(data);
            } catch (e) {
              console.error('Docxtemplater render error:', e && e.message || e);
              process.exit(1);
            }

            const out = doc.getZip().generate({type:'nodebuffer'});
            fs.mkdirSync('dist', { recursive: true });
            fs.writeFileSync(path.join('dist','smoke-output.docx'), out);

            const html = await mammoth.convertToHtml({buffer: out});
            if (/{{[^{}]+}}/.test(html.value)) {
              console.error('Leftover {{tag}} tokens found in HTML preview');
              process.exit(1);
            }
            console.log('Smoke test OK');
          })();
          JS
          node tests/smoke_test.js

      - name: Commit changes back (only if anything changed)
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if ! git diff --staged --quiet; then
            git commit -m "Fix/vendor/test: local libs + normalized template [skip ci]"
            git push
          else
            echo "No repo changes to commit."
          fi

      - name: Upload site for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: fix_vendor_test
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
